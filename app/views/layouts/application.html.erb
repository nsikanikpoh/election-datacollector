<!DOCTYPE html>
<html lang="en">
  <head>
    <%= csrf_meta_tags %>
    <meta name="viewport" content="width=device-width, initial-scale=1">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="keywords" content="Glance Design Dashboard Responsive web template, Bootstrap Web Templates, Flat Web Templates, Android Compatible web template, 
SmartPhone Compatible web template, free WebDesigns for Nokia, Samsung, LG, SonyEricsson, Motorola web design" />
   <%= stylesheet_link_tag 'application', media: 'all' %>
   <script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false); function hideURLbar(){ window.scrollTo(0,1); } </script>
    <title><%= full_title( yield( :title)) %></title>
    <% if @set_download_refresh_meta %>

<% end %>


      <!-- FusionCharts Library -->
    <script type="text/javascript" src="//cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js"></script>
    <script type="text/javascript" src="//cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js"></script>
    <script type="text/javascript" src="//cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.gammel.js"></script>
    <script type="text/javascript" src="//cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.zune.js"></script>
    <script type="text/javascript" src="//cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.carbon.js"></script>
    <script type="text/javascript" src="//cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.ocean.js"></script>  
 <script>
              $(document).ready(function() {
                $("#owl-demo").owlCarousel({
                  items : 3,
                  lazyLoad : true,
                  autoPlay : true,
                  pagination : true,
                  nav:true,
                });
              });
            </script> 

<%= yield :third_party_js %>
<meta name="google-site-verification" content="-Jjra7cb-96G22e4UrrNawow5oRIP6NFPl2nhU5K-_U" />
</head>

 
 <body class="cbp-spmenu-push">
  <div class="main-content">
  <div class="cbp-spmenu cbp-spmenu-vertical cbp-spmenu-left" id="cbp-spmenu-s1">
                <%= render partial: 'layouts/shared/leftnav' %>
  </div>            
  
      <%= render partial: 'layouts/shared/topnav' %>
            
        <!-- /top navigation -->

        <!-- page content -->
        <<div id="page-wrapper">
      <div class="main-page">
         <div>
       <% flash.each do |message_type, message| %>
    <div class="alert alert-success" role="alert"><%= message_type.to_s.capitalize %> - <%= message %></div>
    </div>
    <% end %>
        
        
          <%= yield %>
        </div>
        <!-- /page content -->

        <!-- footer content -->
        <footer>
          <%= render partial: 'layouts/shared/footer' %>
        </footer>
        <!-- /footer content -->
      </div>
    </div>

<script type="text/javascript" src=" http://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js"></script> 


<script type="text/javascript" src=" http://cdn.fusioncharts.com/fusioncharts/latest/themes/fusioncharts.theme.fusion.js">
  
</script> 
   
  
<%= include_jquery cdn: :google %>
 <%= javascript_include_tag 'application' %>

          <script type="text/javascript">
  
class Connected {
  constructor(){
    this.setup();
    this.listen();
    this.tick();
  }
  
  setup(){
    this.c = document.getElementById('canvas');
    this.ctx = this.c.getContext('2d');
    
    this.c.width = window.innerWidth;
    this.c.height = window.innerHeight;
    
    this.points = [];
    this.graves = [];
    
    this.ctx.lineCap = 'round';
    //this.ctx.lineWidth = 2;
    
    this.createPoint(this.c.width / 2, this.c.height / 2, 360 * Math.random(), {r: 180, g: 180, b: 180});
  }
  
  listen(){
    this.c.addEventListener('click', (e)=>{
      let x = e.pageX;
      let y = e.pageY;
      
      this.createPoint(x, y, 360 * Math.random(), {r: 180, g: 180, b: 180});
    });
    
    window.addEventListener('resize', ()=>{
      this.c.width = window.innerWidth;
      this.c.height = window.innerHeight;
    });
  }
  
  createPoint(x, y, d, color) {
    this.points.push({
      x: x,
      y: y,
      d: d,
      life: 100,
      length: 1,
      color: this.createColor(color),
      speed: Math.max(.5, parseInt(2 * Math.random())),
      maxLength: parseInt(20 * Math.random()),
      spawnedChildren: false,
      dead: false
    });
  }
  
  tick(){
    window.requestAnimationFrame(this.tick.bind(this));
    
    this.move();
    this.cleanTheDead();
    this.draw();
  }
  
  cleanTheDead(){
    this.points.forEach((point, i)=>{
      if(point.dead){
        this.points.splice(i, 1);
      }
    });
  }
  
  move(){
    this.points.forEach((point)=>{
      if(point.length < point.maxLength){
        point.length += point.speed;
        
        this.checkPosition(point);
      } else {
        
        if(!point.spawnedChildren){
          point.spawnedChildren = true;
          
          if(this.points.length < 1000){
            this.spawnChildren(point);
          }
        }
        
        if(point.life > 0){
          point.life--;
        } else {
          point.dead = true;
        }
      }
    });
  }
  
  checkPosition(point){
    if(point.x > this.c.width ||
       point.x < 0 ||
       point.y < 0 ||
       point.y > this.c.height){
      
      point.length = point.maxLength;
    }
  }
  
  createColor(c){
    var color = {
      r: this.deviateColor(c.r),
      g: this.deviateColor(c.g),
      b: this.deviateColor(c.b)
    }
    
    return color;
  }
  
  deviateColor(x){
    var maxDeviation = 10;
    
    if(Math.random() < 0.5){
      x += maxDeviation * Math.random();
    } else {
      x -= maxDeviation * Math.random();
    }
    
    if(x > 250){
      x = 250;
    }
    
    if( x < 150) {
      x = 150;
    }
    
    return parseInt(x);
  }
  
  spawnChildren(p){
    let e = this.calcEnd(p);
    let total = Math.max(1, parseInt(3 * Math.random()));
        
    for(let i = 0; i < total; i++){
      let d = this.deviateDirection(p.d);
      this.createPoint(e.x, e.y, d, p.color);
    }
  }
  
  draw(){
    this.ctx.clearRect(0, 0, this.c.width, this.c.height);
        
    this.points.forEach((p)=>{
      var e = this.calcEnd(p);
      
      this.ctx.beginPath();
      this.ctx.moveTo(p.x, p.y);
      this.ctx.lineTo(e.x, e.y);
      this.ctx.strokeStyle = `rgba(${p.color.r}, ${p.color.g}, ${p.color.b}, ${p.life / 100})`;
      this.ctx.stroke();
      this.ctx.closePath();
    });
    
    this.drawUi();
  }
  
  drawUi(){
    this.ctx.font = "12px sans-serif";
    this.ctx.fillText(`Agents: ${this.points.length}`, 20, 30);
  }
  
  deviateDirection(d){
    let maxDeviation = 45;
    
    if(Math.random() < 0.5){
      d += maxDeviation * Math.random();
      //d+=90;
    } else {
      d -= maxDeviation * Math.random();
      //d-=90;
    }
    
    return d;
  }
  
  calcEnd(p){
    return {
      x: p.x + p.length * Math.cos(p.d * (Math.PI / 180)),
      y: p.y + p.length * Math.sin(p.d * (Math.PI / 180))
    }
  }
}

new Connected();
</script>
  <script>
        var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        var color = Chart.helpers.color;
        var barChartData = {
            labels: ["January", "February", "March", "April", "May", "June", "July"],
            datasets: [{
                label: 'Dataset 1',
                backgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),
                borderColor: window.chartColors.red,
                borderWidth: 1,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ]
            }, {
                label: 'Dataset 2',
                backgroundColor: color(window.chartColors.blue).alpha(0.5).rgbString(),
                borderColor: window.chartColors.blue,
                borderWidth: 1,
                data: [
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor(),
                    randomScalingFactor()
                ]
            }]

        };

        window.onload = function() {
            var ctx = document.getElementById("canvas").getContext("2d");
            window.myBar = new Chart(ctx, {
                type: 'bar',
                data: barChartData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Chart.js Bar Chart'
                    }
                }
            });

        };

        document.getElementById('randomizeData').addEventListener('click', function() {
            var zero = Math.random() < 0.2 ? true : false;
            barChartData.datasets.forEach(function(dataset) {
                dataset.data = dataset.data.map(function() {
                    return zero ? 0.0 : randomScalingFactor();
                });

            });
            window.myBar.update();
        });

        var colorNames = Object.keys(window.chartColors);
        document.getElementById('addDataset').addEventListener('click', function() {
            var colorName = colorNames[barChartData.datasets.length % colorNames.length];;
            var dsColor = window.chartColors[colorName];
            var newDataset = {
                label: 'Dataset ' + barChartData.datasets.length,
                backgroundColor: color(dsColor).alpha(0.5).rgbString(),
                borderColor: dsColor,
                borderWidth: 1,
                data: []
            };

            for (var index = 0; index < barChartData.labels.length; ++index) {
                newDataset.data.push(randomScalingFactor());
            }

            barChartData.datasets.push(newDataset);
            window.myBar.update();
        });

        document.getElementById('addData').addEventListener('click', function() {
            if (barChartData.datasets.length > 0) {
                var month = MONTHS[barChartData.labels.length % MONTHS.length];
                barChartData.labels.push(month);

                for (var index = 0; index < barChartData.datasets.length; ++index) {
                    //window.myBar.addData(randomScalingFactor(), index);
                    barChartData.datasets[index].data.push(randomScalingFactor());
                }

                window.myBar.update();
            }
        });

        document.getElementById('removeDataset').addEventListener('click', function() {
            barChartData.datasets.splice(0, 1);
            window.myBar.update();
        });

        document.getElementById('removeData').addEventListener('click', function() {
            barChartData.labels.splice(-1, 1); // remove the label first

            barChartData.datasets.forEach(function(dataset, datasetIndex) {
                dataset.data.pop();
            });

            window.myBar.update();
        });
    </script>

    <script>




( function( window ) {

'use strict';

// class helper functions from bonzo https://github.com/ded/bonzo

function classReg( className ) {
  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
}

// classList support for class management
// altho to be fair, the api sucks because it won't accept multiple classes at once
var hasClass, addClass, removeClass;

if ( 'classList' in document.documentElement ) {
  hasClass = function( elem, c ) {
    return elem.classList.contains( c );
  };
  addClass = function( elem, c ) {
    elem.classList.add( c );
  };
  removeClass = function( elem, c ) {
    elem.classList.remove( c );
  };
}
else {
  hasClass = function( elem, c ) {
    return classReg( c ).test( elem.className );
  };
  addClass = function( elem, c ) {
    if ( !hasClass( elem, c ) ) {
      elem.className = elem.className + ' ' + c;
    }
  };
  removeClass = function( elem, c ) {
    elem.className = elem.className.replace( classReg( c ), ' ' );
  };
}

function toggleClass( elem, c ) {
  var fn = hasClass( elem, c ) ? removeClass : addClass;
  fn( elem, c );
}

window.classie = {
  // full names
  hasClass: hasClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  // short names
  has: hasClass,
  add: addClass,
  remove: removeClass,
  toggle: toggleClass
};

})( window );


      var menuLeft = document.getElementById( 'cbp-spmenu-s1' ),
        showLeftPush = document.getElementById( 'showLeftPush' ),
        body = document.body;
        
      showLeftPush.onclick = function() {
        classie.toggle( this, 'active' );
        classie.toggle( body, 'cbp-spmenu-push-toright' );
        classie.toggle( menuLeft, 'cbp-spmenu-open' );
        disableOther( 'showLeftPush' );
      };
      

      function disableOther( button ) {
        if( button !== 'showLeftPush' ) {
          classie.toggle( showLeftPush, 'disabled' );
        }
      }
    </script>
  <!-- //Classie --><!-- //for toggle left push menu script -->
    

  <script>

      $('.sidebar-menu').SidebarNav()



    </script>

  </body>
</html>
